
                            SubQurys
                          =============
                       
1. Inline view:- Oracle 7.2 introduced Inline views.In line views are
==============   special type of queries used in Top-n analysis.
                  in place of tablename we are writing subquery
                  is called inline view.


Syntax:-
=======
 select * from (subquery);



Q)Write a query to display the employees who are getting more
  than 30000 annsal from emp table?

Note:-in where clause we are not allowed to use column aliasname.
=====   then those type of queries we are putting in inline view.
      then internally column aliasname behaves like a exact table
      column 


               -----------------------------
select * from( |  ename  |  sal |  annsal  |)where annsal>300000;
               -----------------------------
               |         |      |          |
               -----------------------------

SQL> select * from (select ename,sal,(sal*12)as annsal from emp)where annsal > 30000;

----------------------------------------------------------------------

                               ROWNUM
                             ==========

Q) Write a query to display first row from emp table using rownum?

SQL> SELECT * FROM EMP WHERE ROWNUM = 1;


Q) Write a query to display second row from emp table using rownum? 

NOTE:-Generally, rownum doesn't work with more than 1 +ve integer, 
=====  i.e.,it works with <, <= operators.

SQL> SELECT * FROM EMP WHERE ROWNUM <= 2 MINUS(SELECT * FROM EMP WHERE ROWNUM = 1);



Q)write a query to display first five highest salary employees from
  emp table by using rownum?

SQL> SELECT * FROM (SELECT * FROM EMP ORDER BY SAL DESC) WHERE ROWNUM <=5;


Q)write a query to display fifth row from emp table by using rownum?

SQL> SELECT * FROM EMP WHERE ROWNUM <= 5 MINUS(SELECT * FROM EMP WHERE ROWNUM <=4);


 *
***write a query to display last 2 rows from emp table by using
 *     rownum?

SQL> SELECT * FROM (SELECT ROWNUM AS RNO, EMPNO,ENAME,SAL,HIREDATE FROM EMP )E
  2  WHERE RNO >= (SELECT COUNT(*)-1 FROM EMP);
 

 *
***Note:-in oracle we are creating rownum alliasnames in inline views 
 * ====  then that aliasname work with all sql operators.

1) Write a query to display second record from emp table using  
   rownum alias name?

SQL> SELECT * FROM(SELECT EMP.*,ROWNUM AS R FROM EMP WHERE ROWNUM <=2)WHERE R =2;



2)write a query to display rows between 4 to 8 from emp
  table by using rownum aliasname?

SQL> SELECT * FROM (SELECT EMP.*,ROWNUM AS R FROM EMP WHERE ROWNUM <=8)WHERE R >=4;


3)write a query to display 2,3,5,7,9th records from emp
  table by using rownum aliasname?

SQL> SELECT * FROM (SELECT EMP.*,ROWNUM AS R FROM EMP WHERE ROWNUM <=9) WHERE R IN (2,3,5,7,9);


4)write a query to display even no of records from emp 
  table by using rownum aliasname?


5)write a quey to display first row,last row from emp table by
  using rownum aliasname?

6)write a query to skip 3 rows and then display remaing all rows from
  emp table by using rownum aliasname.

SQL> SELECT * FROM (SELECT EMP.* , ROWNUM AS R FROM EMP WHERE ROWNUM <= (SELECT COUNT(*) FROM EMP))WHERE R > 3;



----------------------------------------------------------------------
Analytical functions
====================
Oracle having following analytical functions.these are
   1.row_number()
   2.rank()
 *
***3.dense_rank()
 *


syntax:-
=======
Analytical functionname()over
    (partition by columnname
     order by columnname[asc/desc])

   these 3 analytical functions automatically assigns ranks either
group wise or rows wise in a table.

   Row_number() analytical function automatically assigns different
rank numbers when values are same whereas rank(),dense_rank() 
functions automatically assigns same rank numbers when values are
same and also rank() skips next consecutive rank numbers where as
dense_rank() does not skips next consecutive rank numbers

eg:-
=====
ROW_NUMBER():-
=============

        DEPTNO       ENAME        SAL         R
       --------     --------    -------     -----
          20         SCOTT        3100        1
          20         FORD         3100        2
          20         JONES        3075        3



RANK():-
========

        DEPTNO       ENAME        SAL         R
       --------     --------    -------     -----
          20         SCOTT        3100        1
          20         FORD         3100        1
          20         JONES        3075        3



DENSE_RANK():-
=============
 
        DEPTNO       ENAME        SAL         R
       --------     --------    -------     -----
          20         SCOTT        3100        1
          20         FORD         3100        1
          20         JONES        3075        2



 *
***write a query to display 2nd highest salary employee 
 *  from emp table by using analytical function

SQL> SELECT * FROM(SELECT EMPNO,ENAME,HIREDATE,SAL,DENSE_RANK() OVER (ORDER BY SAL DESC)AS RNK FROM EMP) WHERE RNK =2;

 
Q)write a query to display 2nd highest salary employee in each 
  department from emp table by using analytical function

SQL> SELECT * FROM ( SELECT EMPNO,ENAME, SAL,DEPTNO, DENSE_RANK() OVER (PARTITION BY DEPTNO ORDER BY SAL DESC) AS RNK  FROM EMP) WHERE RNK =2;



Q)write a query to display 5th highest salary employee from emp 
  table by using analytical function

SQL> SELECT * FROM(SELECT EMPNO,ENAME,SAL,DENSE_RANK() OVER (ORDER BY SAL DESC) AS RNK FROM EMP) WHERE RNK =5;



----------------------------------------------------------------------

 *
***ROWID:-
 * ===== 

 Rowid is a pseudo column.it behaves like a table column.rowid stores
physical address of a row in a table.whenever we are inserting a 
record into a table then oracle server internally automatically
generates an unique identification number in hexadecimal format 
for identifing a record uniquely.this is called rowid.

  Generally in oracle by using rowid we are retriving data very fastly
from oracle database.that's why rowid querys improve performance of
the application.

 in oracle by defalut rowids are in ascending order.that's why we can
also use min(),max() functions in rowids.



 *
***Delete duplicate rows from a table
 * ==================================

 in all relational databases delete duplicate rows except one row in
each group in a table is also called as delete duplicate rows in a
table.if we want to delete duplicate rows from a table then we must
use rowid.

Q)write a query to delete duplicate rows from following table

SQL>create table test(sno number(10));
SQL>insert into test values(.......);
SQL>select * from test;
          
          SNO
      ----------
           10
           10
           10
           20
           20
           20
           30
           30
           40
           50

SQL>delete from test
    where rowid not in(select min(rowid) from test group by sno);
   
4 rows deleted


----------------------------------------------------------------------
                        CORELATED SUBQUERYS
                   ===========================

Q)write a query to display 2nd highest salary employee from the 
  following table by using corelated subquery?


SQL>create table test(ename varchar2(10),sal number(10));
SQL>insert into test values(......);
SQL>select * from test;


      ENAME          SAL
    --------      ----------
      abc            100
      xyz            150
      gowtham        200-----------
      pqr            300           |------->counting 200 1 time is SOL
      zzz            200-----------                      |
                                                         |
                                                 distinct clause
                                                         |
                                                         |
                                                 duplicate data is
                                                    eliminating
                                                       



SQL>select * from test e1                          
    where 2=(select count(*) from test e2
    where e2.sal>=e1.sal);

no rows selected

   whenever resource table having duplicate data and also when we are
try to retrive data based on duplicate values by using above quey 
then database server does not return any rows.to overcome this problem
then we must use distinct clause with in count() function.

solution:-
========
SQL>select * from test e1                          
    where 2=(select count(distinct(sal)) from test e2
    where e2.sal>=e1.sal);

     ENAME          SAL
   ---------     ---------
     gowtham       200
     zzz           200
  
EXECUTION PROCESS:-
================== 
Phase1:-
======
step1:-Get a candidate row(first row)------>(abc 100)

step2:-select count(distinct(sal)) from test e2
       where e2.sal>=100;
 
             4

step3:-select * from test e1
       where 2=4;(false)

when condition is false then that candidate row does not return into
result.

Phase2:-
========
step1:-Get a candidate row(xyz,150)
======

step2:-select count(distinct(sal)) from test e2
======  where e2.sal>=150;

             3

step3:-select * from test e1
======  where 2=3;(false)

when condition is false then that candidate row does not return into
result.

Phase3:-
======
step1:-Get a candidate row(gowtham 200)

step2:-select count(distinct(sal)) from test e2
======  where e2.sal>=200;

             2

step3:-select * from test e1
======  where 2=2;(true)

gowtham 200

when condition is true then that record return into result.



Phase4:-
======
step1:-Get a candidate row(first row)------>(pqr 300)

step2:-select count(distinct(sal)) from test e2
       where e2.sal>=300;
 
             1

step3:-select * from test e1
       where 2=1;(false)

when condition is false then that candidate row does not return into
result.

Phase5:-
======
step1:-Get a candidate row(zzz 200)

step2:-select count(distinct(sal)) from test e2
======  where e2.sal>=200;

             2

step3:-select * from test e1
======  where 2=2;(true)

when condition is true then that record return into result.

zzz 200

 *
***write a query to display 2nd highest salary employee from
 *     emp table
    by using corelated subquery

SQL>select * from emp e1                          
    where 2=(select count(distinct(sal)) from emp e2
    where e2.sal>=e1.sal);



Q)write a query to display the employees who are getting more sal
  than the average salary of their jobs from emp table by using 
  corelated subquery


 *
***write a query to display those departments from dept table having
 *  employees in emp table by using corelated subquery exists operator



Q)write a query to display those departments from dept table having
  employees in emp table by using non corelated subquery in operator

